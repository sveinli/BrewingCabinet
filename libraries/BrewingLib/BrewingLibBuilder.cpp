/**
BrewingLibBuilder implementation.
*/

#include "Cabinet.h"
#include "BrewingCabinetSim.h"
#include "SSRControlledHeater.h"
#include "BrewingLibBuilder.h"

using namespace BrewingLib;

BrewingLibBuilder::BrewingLibBuilder(const char* libName, const char* timeStamp)
    : CDPBuilder(libName, timeStamp)
{
}

CDPComponent* BrewingLibBuilder::CreateNewComponent(const std::string& type)
{
    if (type=="BrewingLib.Cabinet")
        return new Cabinet;
    
    if (type=="BrewingLib.BrewingCabinetSim")
        return new BrewingCabinetSim;
    
    if (type=="BrewingLib.SSRControlledHeater")
        return new SSRControlledHeater;
    
    return CDPBuilder::CreateNewComponent(type);
}

CDPBaseObject* BrewingLibBuilder::CreateNewCDPOperator(const std::string& modelName, const std::string& type, const CDPPropertyBase* inputProperty)
{
    return CDPBuilder::CreateNewCDPOperator(modelName, type, inputProperty);
}

/**
Do not edit. Autogenerated Builder CDPObject factory function.
*/
CDPObject* BrewingLibBuilder::CreateNewObject(const std::string& type)
{
    return CDPBuilder::CreateNewObject(type);
}

/**
CDPNode factory function.
*/
CDP::StudioAPI::CDPNode* BrewingLibBuilder::CreateNewCDPNode(const std::string& type)
{
    return CDPBuilder::CreateNewCDPNode(type);
}
